{
    "commits_count": 35,
    "date_started": "2016-12-24",
    "date_updated": "2019-09-22",
    "description": "Another web vulnerabilities scanner, this extension works on Chrome and Opera",
    "forks_count": 158,
    "html_url": "https://github.com/swisskyrepo/DamnWebScanner",
    "keywords": [
        "Chrome rce",
        "Chrome rce vulnerability",
        "lfi",
        "rce vulnerability"
    ],
    "language": "Python",
    "repo_name": "DamnWebScanner",
    "repo_owner": "swisskyrepo",
    "repotime": "2019-09-22, 16:11:49",
    "stargazers_count": 459,
    "watchers_count": 459
}
{
    "commits_count": 22,
    "date_started": "2019-09-13",
    "date_updated": "2019-09-20",
    "description": "1.          Specs: Backend: Laravel 5.6+  Frontend: Blade or Vue.js  Database: MySQL  2.          Task: ·         Write a migration for &amp;quot;authors&amp;quot; that consists(tartalmaz) of a name, age and address.  ·         Write a factory for &amp;quot;authors&amp;quot; and seed them with 10 rows of random data.  ·         Write a migration for &amp;quot;books&amp;quot; that consists of a name and the release date. An author can write one or more books.  ·         Write a factory for &amp;quot;books&amp;quot; and seed them with 30 rows of random data.  ·         Design a simple form in the frontend that makes it possible to insert a new author together with a new book and store it in the database.  ·         Create a button &amp;quot;Show Data&amp;quot; which will display all authors and their books. I want to be able to refresh the data after I inserted a new author.  ·         Validate the input client- and server-sided and inform the user in case of wrong inputs.",
    "forks_count": 0,
    "html_url": "https://github.com/GyarmatiAdam/sportradar_exercise",
    "keywords": [
        "wrong input validation"
    ],
    "language": "PHP",
    "repo_name": "sportradar_exercise",
    "repo_owner": "GyarmatiAdam",
    "repotime": "2019-09-20, 09:28:39",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 107,
    "date_started": "2019-09-20",
    "date_updated": "2019-09-20",
    "description": "Writing 50 POC's for exploits from scratch as practice for OSCE, all BOF. Including: Vannila, SEH, egghunters, ASLR/DEP/NX bypassing",
    "forks_count": 1,
    "html_url": "https://github.com/catsmells/Windows-Exploit-Development-practice",
    "keywords": [
        "dep bypass",
        "Win aslr bypass",
        "Windows aslr bypass exploitation",
        "Windows aslr bypass",
        "aslr bypass exploitation",
        "Win aslr bypass exploit",
        "aslr bypass",
        "Windows aslr bypass exploit",
        "aslr bypass poc",
        "aslr bypass exploit",
        "Windows aslr bypass poc",
        "Win aslr bypass poc",
        "Win aslr bypass exploitation"
    ],
    "language": "Python",
    "repo_name": "Windows-Exploit-Development-practice",
    "repo_owner": "catsmells",
    "repotime": "2019-09-20, 02:31:30",
    "stargazers_count": 8,
    "watchers_count": 8
}
{
    "commits_count": 9,
    "date_started": "2019-09-07",
    "date_updated": "2019-09-16",
    "description": "initial exploit for CVE-2019-0708, BlueKeep CVE-2019-0708 BlueKeep RDP Remote Windows Kernel Use After Free  The RDP termdd.sys driver improperly handles binds to internal-only channel MS_T120, allowing a malformed Disconnect Provider Indication message to cause use-after-free. With a controllable data/size remote nonpaged pool spray, an indirect call gadget of the freed channel is used to achieve arbitrary code execution.",
    "forks_count": 15,
    "html_url": "https://github.com/wqsemc/CVE-2019-0708",
    "keywords": [
        "Windows use after free",
        "Windows remote code execution",
        "Windows use after free exploit",
        "use after free exploitation",
        "remote code execution exploitation",
        "Windows remote code execution exploit",
        "Windows remote code execution exploitation",
        "Windows use after free exploitation",
        "use after free exploit",
        "remote code execution exploit"
    ],
    "language": "Ruby",
    "repo_name": "CVE-2019-0708",
    "repo_owner": "wqsemc",
    "repotime": "2019-09-16, 18:35:56",
    "stargazers_count": 12,
    "watchers_count": 12
}
{
    "commits_count": 3,
    "date_started": "2018-11-26",
    "date_updated": "2019-09-03",
    "description": "exploit code for a bpf heap overflow vulnerability",
    "forks_count": 10,
    "html_url": "https://github.com/ww9210/kernel4.20_bpf_LPE",
    "keywords": [
        "lpe exploit",
        "lpe vulnerability",
        "lpe exploitation"
    ],
    "language": "C",
    "repo_name": "kernel4.20_bpf_LPE",
    "repo_owner": "ww9210",
    "repotime": "2019-09-03, 13:37:54",
    "stargazers_count": 27,
    "watchers_count": 27
}
{
    "commits_count": 211,
    "date_started": "2019-09-02",
    "date_updated": "2019-09-01",
    "description": "Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code outside of a browser. Node.js lets developers use JavaScript to write command line tools and for server-side scripting—running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a &amp;quot;JavaScript everywhere&amp;quot; paradigm,[7] unifying web application development around a single programming language, rather than different languages for server side and client side scripts. ",
    "forks_count": 0,
    "html_url": "https://github.com/GhettoGeek/Node.js",
    "keywords": [
        "cross-side-scripting"
    ],
    "language": "JavaScript",
    "repo_name": "Node.js",
    "repo_owner": "GhettoGeek",
    "repotime": "2019-09-01, 23:45:46",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 35,
    "date_started": "2016-12-24",
    "date_updated": "2019-09-22",
    "description": "Another web vulnerabilities scanner, this extension works on Chrome and Opera",
    "forks_count": 157,
    "html_url": "https://github.com/swisskyrepo/DamnWebScanner",
    "keywords": [
        "Chrome rce",
        "Chrome rce vulnerability",
        "lfi",
        "rce vulnerability"
    ],
    "language": "Python",
    "repo_name": "DamnWebScanner",
    "repo_owner": "swisskyrepo",
    "repotime": "2019-09-22, 16:11:49",
    "stargazers_count": 460,
    "watchers_count": 460
}
{
    "commits_count": 22,
    "date_started": "2019-09-13",
    "date_updated": "2019-09-20",
    "description": "1.          Specs: Backend: Laravel 5.6+  Frontend: Blade or Vue.js  Database: MySQL  2.          Task: ·         Write a migration for &amp;quot;authors&amp;quot; that consists(tartalmaz) of a name, age and address.  ·         Write a factory for &amp;quot;authors&amp;quot; and seed them with 10 rows of random data.  ·         Write a migration for &amp;quot;books&amp;quot; that consists of a name and the release date. An author can write one or more books.  ·         Write a factory for &amp;quot;books&amp;quot; and seed them with 30 rows of random data.  ·         Design a simple form in the frontend that makes it possible to insert a new author together with a new book and store it in the database.  ·         Create a button &amp;quot;Show Data&amp;quot; which will display all authors and their books. I want to be able to refresh the data after I inserted a new author.  ·         Validate the input client- and server-sided and inform the user in case of wrong inputs.",
    "forks_count": 0,
    "html_url": "https://github.com/GyarmatiAdam/sportradar_exercise",
    "keywords": [
        "wrong input validation"
    ],
    "language": "PHP",
    "repo_name": "sportradar_exercise",
    "repo_owner": "GyarmatiAdam",
    "repotime": "2019-09-20, 09:28:39",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 107,
    "date_started": "2019-09-20",
    "date_updated": "2019-09-20",
    "description": "Writing 50 POC's for exploits from scratch as practice for OSCE, all BOF. Including: Vannila, SEH, egghunters, ASLR/DEP/NX bypassing",
    "forks_count": 1,
    "html_url": "https://github.com/catsmells/Windows-Exploit-Development-practice",
    "keywords": [
        "dep bypass",
        "Win aslr bypass",
        "Windows aslr bypass exploitation",
        "Windows aslr bypass",
        "aslr bypass exploitation",
        "Win aslr bypass exploit",
        "aslr bypass",
        "Windows aslr bypass exploit",
        "aslr bypass poc",
        "aslr bypass exploit",
        "Windows aslr bypass poc",
        "Win aslr bypass poc",
        "Win aslr bypass exploitation"
    ],
    "language": "Python",
    "repo_name": "Windows-Exploit-Development-practice",
    "repo_owner": "catsmells",
    "repotime": "2019-09-20, 02:31:30",
    "stargazers_count": 8,
    "watchers_count": 8
}
{
    "commits_count": 9,
    "date_started": "2019-09-07",
    "date_updated": "2019-09-16",
    "description": "initial exploit for CVE-2019-0708, BlueKeep CVE-2019-0708 BlueKeep RDP Remote Windows Kernel Use After Free  The RDP termdd.sys driver improperly handles binds to internal-only channel MS_T120, allowing a malformed Disconnect Provider Indication message to cause use-after-free. With a controllable data/size remote nonpaged pool spray, an indirect call gadget of the freed channel is used to achieve arbitrary code execution.",
    "forks_count": 15,
    "html_url": "https://github.com/wqsemc/CVE-2019-0708",
    "keywords": [
        "Windows use after free",
        "Windows remote code execution",
        "Windows use after free exploit",
        "use after free exploitation",
        "remote code execution exploitation",
        "Windows remote code execution exploit",
        "Windows remote code execution exploitation",
        "Windows use after free exploitation",
        "use after free exploit",
        "remote code execution exploit"
    ],
    "language": "Ruby",
    "repo_name": "CVE-2019-0708",
    "repo_owner": "wqsemc",
    "repotime": "2019-09-16, 18:35:56",
    "stargazers_count": 12,
    "watchers_count": 12
}
{
    "commits_count": 3,
    "date_started": "2018-11-26",
    "date_updated": "2019-09-03",
    "description": "exploit code for a bpf heap overflow vulnerability",
    "forks_count": 10,
    "html_url": "https://github.com/ww9210/kernel4.20_bpf_LPE",
    "keywords": [
        "lpe exploit",
        "lpe vulnerability",
        "lpe exploitation"
    ],
    "language": "C",
    "repo_name": "kernel4.20_bpf_LPE",
    "repo_owner": "ww9210",
    "repotime": "2019-09-03, 13:37:54",
    "stargazers_count": 27,
    "watchers_count": 27
}
{
    "commits_count": 211,
    "date_started": "2019-09-02",
    "date_updated": "2019-09-01",
    "description": "Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code outside of a browser. Node.js lets developers use JavaScript to write command line tools and for server-side scripting—running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a &amp;quot;JavaScript everywhere&amp;quot; paradigm,[7] unifying web application development around a single programming language, rather than different languages for server side and client side scripts. ",
    "forks_count": 0,
    "html_url": "https://github.com/GhettoGeek/Node.js",
    "keywords": [
        "cross-side-scripting"
    ],
    "language": "JavaScript",
    "repo_name": "Node.js",
    "repo_owner": "GhettoGeek",
    "repotime": "2019-09-01, 23:45:46",
    "stargazers_count": 0,
    "watchers_count": 0
}
