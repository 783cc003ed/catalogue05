{
    "commits_count": 0,
    "date_started": "2019-11-24",
    "date_updated": "2019-11-24",
    "description": "Privacy Policy   Веселый Бородач built the [App Name] app as [open source/free/freemium/ad-supported/commercial] app. This SERVICE is provided by [Developer/Company name] [at no cost] and is intended for use as is.   This page is used to inform visitors regarding [my/our] policies with the collection, use, and disclosure of Personal Information if anyone decided to use [my/our] Service.   If you choose to use [my/our] Service, then you agree to the collection and use of information in relation to this policy. The Personal Information that [I/We] collect is used for providing and improving the Service. [I/We] will not use or share your information with anyone except as described in this Privacy Policy.   The terms used in this Privacy Policy have the same meanings as in our Terms and Conditions, which is accessible at [App Name] unless otherwise defined in this Privacy Policy.   Information Collection and Use   For a better experience, while using our Service, [I/We] may require you to ...",
    "forks_count": 0,
    "html_url": "https://github.com/Raiman161/Privacy-Policy",
    "keywords": [
        "use after free disclosure"
    ],
    "language": null,
    "repo_name": "Privacy-Policy",
    "repo_owner": "Raiman161",
    "repotime": "2019-11-24, 12:41:03",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 7,
    "date_started": "2019-01-03",
    "date_updated": "2019-11-22",
    "description": "A tool that finds and scan sites for sql injection vulnerability",
    "forks_count": 36,
    "html_url": "https://github.com/Bitwise-01/SQL-scanner",
    "keywords": [
        "sql injection"
    ],
    "language": "Python",
    "repo_name": "SQL-scanner",
    "repo_owner": "Bitwise-01",
    "repotime": "2019-11-22, 13:39:31",
    "stargazers_count": 157,
    "watchers_count": 157
}
{
    "commits_count": 24,
    "date_started": "2019-01-30",
    "date_updated": "2019-11-18",
    "description": "Documents and resources for the &amp;quot;Learning from Incidents in Software&amp;quot; slack workspace.",
    "forks_count": 7,
    "html_url": "https://github.com/norajones/LFI-Slack",
    "keywords": [
        "lfi"
    ],
    "language": null,
    "repo_name": "LFI-Slack",
    "repo_owner": "norajones",
    "repotime": "2019-11-18, 10:01:09",
    "stargazers_count": 39,
    "watchers_count": 39
}
{
    "commits_count": 1,
    "date_started": "2019-11-18",
    "date_updated": "2019-11-18",
    "description": "BlueKeep is a use-after-free vulnerability, meaning that the program tries to use memory after it is supposed to have discarded it. The vulnerability lies in termdd.sys, which is the RDP kernel driver. A user can exploit this by opening an RDP connection to a remote computer called a channel – in this case a default RDP channel called MS_T210 – and sending specially crafted data to it. The exploit runs code on Windows XP, they said, but warned that it would probably crash Windows 7 or Server 2008 machines. By sending a specially crafted packet an attacker is able to set the value for the Channel ID to something the RDP service isn’t expecting, this causes a memory corruption bug that will create the conditions for Remote Code Execution to occur. Should the attacker choose to follow up with packets designed to take advantage of this flaw remote code execution can be achieved with System user privileges. There are no payloads. This is just a PoC. HOWEVER it is easily ported to an exploit...",
    "forks_count": 0,
    "html_url": "https://github.com/sherlocksecurity/Bluekeep-POC",
    "keywords": [
        "Windows use after free poc",
        "Windows use after free exploit",
        "use after free vulnerability",
        "Windows remote code execution",
        "Windows remote code execution poc",
        "Windows remote code execution vulnerability",
        "remote code execution poc",
        "use after free exploit",
        "Windows remote code execution exploit",
        "Windows use after free exploitation",
        "Windows use after free",
        "Windows use after free vulnerability",
        "use after free exploitation",
        "Windows remote code execution exploitation",
        "use after free poc"
    ],
    "language": null,
    "repo_name": "Bluekeep-POC",
    "repo_owner": "sherlocksecurity",
    "repotime": "2019-11-18, 02:21:29",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 40,
    "date_started": "2019-10-30",
    "date_updated": "2019-11-12",
    "description": "Introduction to R  R is a programming language, which is an object oriented language created by Statisticians, R provides objects, operators and functions that allow the user to explore, model and visualize data.  R is a Programming language Developed at AT&amp;amp;T Bell Lab.  It is an open source free language, allowing anyone to use and modify it. R is licensed under the GNU General Public License, with copyright held by The R Foundation For Statistical Computing. It has no need to pay any subscription charges  R has a huge active community member. If you have any question about any function any library you can Google it and you would get a proper answer and right the way.  As it is an open source language, you, me and lots of Data Scientist, they actually built in all those, inbuilt function and they upload it in a website called CRAN and then you can download all those packages. Over 7800 packages listed on CRAN, here we listed some of the most powerful and commonly used in R packages...",
    "forks_count": 2,
    "html_url": "https://github.com/akaidkhan/Data_Science_with_R",
    "keywords": [
        "Microsoft use after free poc",
        "Windows use after free",
        "use after free analysis",
        "Windows use after free analysis",
        "use after free poc",
        "Windows use after free poc",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": "R",
    "repo_name": "Data_Science_with_R",
    "repo_owner": "akaidkhan",
    "repotime": "2019-11-12, 09:58:04",
    "stargazers_count": 8,
    "watchers_count": 8
}
{
    "commits_count": 3,
    "date_started": "2019-11-12",
    "date_updated": "2019-11-12",
    "description": "session ﬁxation vulnerabilities typically arise when an application does not renew this anonymous session id after a successful login.",
    "forks_count": 0,
    "html_url": "https://github.com/appingmap/SessionFixation",
    "keywords": [
        "session vulnerability"
    ],
    "language": "PHP",
    "repo_name": "SessionFixation",
    "repo_owner": "appingmap",
    "repotime": "2019-11-12, 15:17:57",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 0,
    "date_started": "2019-11-01",
    "date_updated": "2019-11-01",
    "description": "Multithreaded Client/Server - Student Database Instructions: The assignment is based on the Area Of Circle and JDBC Labs. Java threads covered ln (Threads and Distributed Processing in Java). The Area-Circle Multithreaded Client/server lab exercise covered in Lab4: Multithreaded Server. Pseudo Code (Area Of Circle) The assignment also uses work from the Java JDBC MySQL Labs &amp;&#35;35;1/&amp;&#35;35;2 1. Create a server hosted database (Assign2) including TWO tables ( students and users). Use the following structures: (Populate each table with 4 records.) students • SID (type int(2), unique key) • STUD_ID (type int(8)) • FNAME (type varchar(20) ) • SNAME (type varchar(20) ) users • UID (type int(2), unique key) • UNAME (type varchar(20) ) 2. Create a socket based Multithreaded Client/Server GUI application. Your application GUI should have two screens (1 User Login, 2 Database support) . The Layout is up to you, but please use standard JDK GUI commands &amp;amp; components. 1 User Login. The server only...",
    "forks_count": 0,
    "html_url": "https://github.com/baizoukou/java_socket_assignment",
    "keywords": [
        "Windows use after free"
    ],
    "language": null,
    "repo_name": "java_socket_assignment",
    "repo_owner": "baizoukou",
    "repotime": "2019-11-01, 13:44:05",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 0,
    "date_started": "2019-11-24",
    "date_updated": "2019-11-24",
    "description": "Privacy Policy   Веселый Бородач built the [App Name] app as [open source/free/freemium/ad-supported/commercial] app. This SERVICE is provided by [Developer/Company name] [at no cost] and is intended for use as is.   This page is used to inform visitors regarding [my/our] policies with the collection, use, and disclosure of Personal Information if anyone decided to use [my/our] Service.   If you choose to use [my/our] Service, then you agree to the collection and use of information in relation to this policy. The Personal Information that [I/We] collect is used for providing and improving the Service. [I/We] will not use or share your information with anyone except as described in this Privacy Policy.   The terms used in this Privacy Policy have the same meanings as in our Terms and Conditions, which is accessible at [App Name] unless otherwise defined in this Privacy Policy.   Information Collection and Use   For a better experience, while using our Service, [I/We] may require you to ...",
    "forks_count": 0,
    "html_url": "https://github.com/Raiman161/Privacy-Policy",
    "keywords": [
        "use after free disclosure"
    ],
    "language": null,
    "repo_name": "Privacy-Policy",
    "repo_owner": "Raiman161",
    "repotime": "2019-11-24, 12:41:03",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 7,
    "date_started": "2019-01-03",
    "date_updated": "2019-11-22",
    "description": "A tool that finds and scan sites for sql injection vulnerability",
    "forks_count": 36,
    "html_url": "https://github.com/Bitwise-01/SQL-scanner",
    "keywords": [
        "sql injection"
    ],
    "language": "Python",
    "repo_name": "SQL-scanner",
    "repo_owner": "Bitwise-01",
    "repotime": "2019-11-22, 13:39:31",
    "stargazers_count": 157,
    "watchers_count": 157
}
{
    "commits_count": 24,
    "date_started": "2019-01-30",
    "date_updated": "2019-11-18",
    "description": "Documents and resources for the &amp;quot;Learning from Incidents in Software&amp;quot; slack workspace.",
    "forks_count": 7,
    "html_url": "https://github.com/norajones/LFI-Slack",
    "keywords": [
        "lfi"
    ],
    "language": null,
    "repo_name": "LFI-Slack",
    "repo_owner": "norajones",
    "repotime": "2019-11-18, 10:01:09",
    "stargazers_count": 39,
    "watchers_count": 39
}
{
    "commits_count": 1,
    "date_started": "2019-11-18",
    "date_updated": "2019-11-18",
    "description": "BlueKeep is a use-after-free vulnerability, meaning that the program tries to use memory after it is supposed to have discarded it. The vulnerability lies in termdd.sys, which is the RDP kernel driver. A user can exploit this by opening an RDP connection to a remote computer called a channel – in this case a default RDP channel called MS_T210 – and sending specially crafted data to it. The exploit runs code on Windows XP, they said, but warned that it would probably crash Windows 7 or Server 2008 machines. By sending a specially crafted packet an attacker is able to set the value for the Channel ID to something the RDP service isn’t expecting, this causes a memory corruption bug that will create the conditions for Remote Code Execution to occur. Should the attacker choose to follow up with packets designed to take advantage of this flaw remote code execution can be achieved with System user privileges. There are no payloads. This is just a PoC. HOWEVER it is easily ported to an exploit...",
    "forks_count": 0,
    "html_url": "https://github.com/sherlocksecurity/Bluekeep-POC",
    "keywords": [
        "Windows use after free poc",
        "Windows use after free exploit",
        "use after free vulnerability",
        "Windows remote code execution",
        "Windows remote code execution poc",
        "Windows remote code execution vulnerability",
        "remote code execution poc",
        "use after free exploit",
        "Windows remote code execution exploit",
        "Windows use after free exploitation",
        "Windows use after free",
        "Windows use after free vulnerability",
        "use after free exploitation",
        "Windows remote code execution exploitation",
        "use after free poc"
    ],
    "language": null,
    "repo_name": "Bluekeep-POC",
    "repo_owner": "sherlocksecurity",
    "repotime": "2019-11-18, 02:21:29",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 40,
    "date_started": "2019-10-30",
    "date_updated": "2019-11-12",
    "description": "Introduction to R  R is a programming language, which is an object oriented language created by Statisticians, R provides objects, operators and functions that allow the user to explore, model and visualize data.  R is a Programming language Developed at AT&amp;amp;T Bell Lab.  It is an open source free language, allowing anyone to use and modify it. R is licensed under the GNU General Public License, with copyright held by The R Foundation For Statistical Computing. It has no need to pay any subscription charges  R has a huge active community member. If you have any question about any function any library you can Google it and you would get a proper answer and right the way.  As it is an open source language, you, me and lots of Data Scientist, they actually built in all those, inbuilt function and they upload it in a website called CRAN and then you can download all those packages. Over 7800 packages listed on CRAN, here we listed some of the most powerful and commonly used in R packages...",
    "forks_count": 2,
    "html_url": "https://github.com/akaidkhan/Data_Science_with_R",
    "keywords": [
        "Microsoft use after free poc",
        "Windows use after free",
        "use after free analysis",
        "Windows use after free analysis",
        "use after free poc",
        "Windows use after free poc",
        "Microsoft use after free analysis",
        "Microsoft use after free"
    ],
    "language": "R",
    "repo_name": "Data_Science_with_R",
    "repo_owner": "akaidkhan",
    "repotime": "2019-11-12, 09:58:04",
    "stargazers_count": 8,
    "watchers_count": 8
}
{
    "commits_count": 3,
    "date_started": "2019-11-12",
    "date_updated": "2019-11-12",
    "description": "session ﬁxation vulnerabilities typically arise when an application does not renew this anonymous session id after a successful login.",
    "forks_count": 0,
    "html_url": "https://github.com/appingmap/SessionFixation",
    "keywords": [
        "session vulnerability"
    ],
    "language": "PHP",
    "repo_name": "SessionFixation",
    "repo_owner": "appingmap",
    "repotime": "2019-11-12, 15:17:57",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 0,
    "date_started": "2019-11-01",
    "date_updated": "2019-11-01",
    "description": "Multithreaded Client/Server - Student Database Instructions: The assignment is based on the Area Of Circle and JDBC Labs. Java threads covered ln (Threads and Distributed Processing in Java). The Area-Circle Multithreaded Client/server lab exercise covered in Lab4: Multithreaded Server. Pseudo Code (Area Of Circle) The assignment also uses work from the Java JDBC MySQL Labs &amp;&#35;35;1/&amp;&#35;35;2 1. Create a server hosted database (Assign2) including TWO tables ( students and users). Use the following structures: (Populate each table with 4 records.) students • SID (type int(2), unique key) • STUD_ID (type int(8)) • FNAME (type varchar(20) ) • SNAME (type varchar(20) ) users • UID (type int(2), unique key) • UNAME (type varchar(20) ) 2. Create a socket based Multithreaded Client/Server GUI application. Your application GUI should have two screens (1 User Login, 2 Database support) . The Layout is up to you, but please use standard JDK GUI commands &amp;amp; components. 1 User Login. The server only...",
    "forks_count": 0,
    "html_url": "https://github.com/baizoukou/java_socket_assignment",
    "keywords": [
        "Windows use after free"
    ],
    "language": null,
    "repo_name": "java_socket_assignment",
    "repo_owner": "baizoukou",
    "repotime": "2019-11-01, 13:44:05",
    "stargazers_count": 0,
    "watchers_count": 0
}
