{
    "commits_count": 17,
    "date_started": "2018-04-24",
    "date_updated": "2018-04-25",
    "description": "CVE-2018-6574 POC : golang 'go get' remote command execution during source code build",
    "forks_count": 13,
    "html_url": "https://github.com/neargle/Go-Get-RCE-CVE-2018-6574-POC",
    "keywords": [
        "rce poc",
        "remote code execution poc"
    ],
    "language": "C",
    "repo_name": "Go-Get-RCE-CVE-2018-6574-POC",
    "repo_owner": "neargle",
    "repotime": "2018-04-25, 00:32:22",
    "stargazers_count": 24,
    "watchers_count": 24
}
{
    "commits_count": 9,
    "date_started": "2018-04-22",
    "date_updated": "2018-04-23",
    "description": "Common WiFi Manager for not hard coding the WiFi SSID and Password",
    "forks_count": 0,
    "html_url": "https://github.com/rid47/WiFi-Manager",
    "keywords": [
        "hard coded password"
    ],
    "language": "C++",
    "repo_name": "WiFi-Manager",
    "repo_owner": "rid47",
    "repotime": "2018-04-23, 15:43:28",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 272,
    "date_started": "2015-03-07",
    "date_updated": "2018-04-20",
    "description": "PowerForensics provides an all in one platform for live disk forensic analysis",
    "forks_count": 275,
    "html_url": "https://github.com/Invoke-IR/PowerForensics",
    "keywords": [
        "by_owner"
    ],
    "language": "C#",
    "repo_name": "PowerForensics",
    "repo_owner": "Invoke-IR",
    "repotime": "2018-04-20, 03:34:59",
    "stargazers_count": 1404,
    "watchers_count": 1404
}
{
    "commits_count": 79,
    "date_started": "2012-07-24",
    "date_updated": "2018-04-17",
    "description": "An automatic XSS discovery tool",
    "forks_count": 119,
    "html_url": "https://github.com/gbrindisi/xsssniper",
    "keywords": [
        "xss"
    ],
    "language": "Python",
    "repo_name": "xsssniper",
    "repo_owner": "gbrindisi",
    "repotime": "2018-04-17, 10:12:36",
    "stargazers_count": 403,
    "watchers_count": 403
}
{
    "commits_count": 3,
    "date_started": "2018-04-16",
    "date_updated": "2018-04-16",
    "description": " Cross Referencing Tables and Forms Used by a Form      [Back]  Here is a unix script, formtables.shl, which shows which tables are used by the given Oracle form, and how they are used (Select or List of values (LOV), Update, Insert, Delete, or undetermined), which can be used on .fmb (form) and .pll (library) files.   It parses the strings in the form file, and makes a best guess effort in determining the tables used by the form, matching the string patterns against a file listing the non-system tables in the database (generated by formtables.sql).   Since it doesn't analyze the code or trace through the function calls in the attached libraries, or look at database triggers for side effects of table changes, it may not find some table references, but, it does a pretty good job on most form files.   For Banner users, it also shows which forms are called by this form, including form access (query only, etc.).  You will first need to run formtables.sql from sqlplus (using @formtables.sql...",
    "forks_count": 0,
    "html_url": "https://github.com/hmont3n3p/BannerInverseEngineering",
    "keywords": [
        "cross-side-scripting"
    ],
    "language": null,
    "repo_name": "BannerInverseEngineering",
    "repo_owner": "hmont3n3p",
    "repotime": "2018-04-16, 00:07:48",
    "stargazers_count": 3,
    "watchers_count": 3
}
{
    "commits_count": 10,
    "date_started": "2016-10-18",
    "date_updated": "2018-04-10",
    "description": "A project to spoof my own html code instead of a real server's response to a GET request.",
    "forks_count": 1,
    "html_url": "https://github.com/mets634/TCP-session-hijacker",
    "keywords": [
        "spoofing session"
    ],
    "language": "Python",
    "repo_name": "TCP-session-hijacker",
    "repo_owner": "mets634",
    "repotime": "2018-04-10, 16:56:04",
    "stargazers_count": 4,
    "watchers_count": 4
}
{
    "commits_count": 85,
    "date_started": "2017-06-09",
    "date_updated": "2018-04-08",
    "description": "Totally Automatic LFI Exploiter (+ Reverse Shell) and Scanner ",
    "forks_count": 404,
    "html_url": "https://github.com/D35m0nd142/LFISuite",
    "keywords": [
        "lfi"
    ],
    "language": "Python",
    "repo_name": "LFISuite",
    "repo_owner": "D35m0nd142",
    "repotime": "2018-04-08, 12:30:09",
    "stargazers_count": 1822,
    "watchers_count": 1822
}
{
    "commits_count": 21,
    "date_started": "2018-04-03",
    "date_updated": "2018-04-06",
    "description": "Should work from Windows 7 to Latest Windows 10 FCU",
    "forks_count": 7,
    "html_url": "https://github.com/websecnl/UAC-Bypass-Exploit",
    "keywords": [
        "uac bypass"
    ],
    "language": "Python",
    "repo_name": "UAC-Bypass-Exploit",
    "repo_owner": "websecnl",
    "repotime": "2018-04-06, 14:57:15",
    "stargazers_count": 3,
    "watchers_count": 3
}
{
    "commits_count": 10,
    "date_started": "2017-05-31",
    "date_updated": "2018-04-05",
    "description": "A script to randomize Cobalt Strike Malleable C2 profiles and reduce the chances of flagging signature-based detection controls",
    "forks_count": 87,
    "html_url": "https://github.com/bluscreenofjeff/Malleable-C2-Randomizer",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "Malleable-C2-Randomizer",
    "repo_owner": "bluscreenofjeff",
    "repotime": "2018-04-05, 18:56:25",
    "stargazers_count": 447,
    "watchers_count": 447
}
{
    "commits_count": 7,
    "date_started": "2017-11-07",
    "date_updated": "2018-04-01",
    "description": "Remote Code Execution exploiter",
    "forks_count": 6,
    "html_url": "https://github.com/websecnl/RCE_Universal_Exploiter",
    "keywords": [
        "remote code execution exploitation",
        "remote code execution exploit"
    ],
    "language": "Python",
    "repo_name": "RCE_Universal_Exploiter",
    "repo_owner": "websecnl",
    "repotime": "2018-04-01, 12:14:55",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 17,
    "date_started": "2018-04-24",
    "date_updated": "2018-04-25",
    "description": "CVE-2018-6574 POC : golang 'go get' remote command execution during source code build",
    "forks_count": 13,
    "html_url": "https://github.com/neargle/Go-Get-RCE-CVE-2018-6574-POC",
    "keywords": [
        "rce poc",
        "remote code execution poc"
    ],
    "language": "C",
    "repo_name": "Go-Get-RCE-CVE-2018-6574-POC",
    "repo_owner": "neargle",
    "repotime": "2018-04-25, 00:32:22",
    "stargazers_count": 24,
    "watchers_count": 24
}
{
    "commits_count": 9,
    "date_started": "2018-04-22",
    "date_updated": "2018-04-23",
    "description": "Common WiFi Manager for not hard coding the WiFi SSID and Password",
    "forks_count": 0,
    "html_url": "https://github.com/rid47/WiFi-Manager",
    "keywords": [
        "hard coded password"
    ],
    "language": "C++",
    "repo_name": "WiFi-Manager",
    "repo_owner": "rid47",
    "repotime": "2018-04-23, 15:43:28",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 272,
    "date_started": "2015-03-07",
    "date_updated": "2018-04-20",
    "description": "PowerForensics provides an all in one platform for live disk forensic analysis",
    "forks_count": 275,
    "html_url": "https://github.com/Invoke-IR/PowerForensics",
    "keywords": [
        "by_owner"
    ],
    "language": "C#",
    "repo_name": "PowerForensics",
    "repo_owner": "Invoke-IR",
    "repotime": "2018-04-20, 03:34:59",
    "stargazers_count": 1404,
    "watchers_count": 1404
}
{
    "commits_count": 79,
    "date_started": "2012-07-24",
    "date_updated": "2018-04-17",
    "description": "An automatic XSS discovery tool",
    "forks_count": 119,
    "html_url": "https://github.com/gbrindisi/xsssniper",
    "keywords": [
        "xss"
    ],
    "language": "Python",
    "repo_name": "xsssniper",
    "repo_owner": "gbrindisi",
    "repotime": "2018-04-17, 10:12:36",
    "stargazers_count": 403,
    "watchers_count": 403
}
{
    "commits_count": 3,
    "date_started": "2018-04-16",
    "date_updated": "2018-04-16",
    "description": " Cross Referencing Tables and Forms Used by a Form      [Back]  Here is a unix script, formtables.shl, which shows which tables are used by the given Oracle form, and how they are used (Select or List of values (LOV), Update, Insert, Delete, or undetermined), which can be used on .fmb (form) and .pll (library) files.   It parses the strings in the form file, and makes a best guess effort in determining the tables used by the form, matching the string patterns against a file listing the non-system tables in the database (generated by formtables.sql).   Since it doesn't analyze the code or trace through the function calls in the attached libraries, or look at database triggers for side effects of table changes, it may not find some table references, but, it does a pretty good job on most form files.   For Banner users, it also shows which forms are called by this form, including form access (query only, etc.).  You will first need to run formtables.sql from sqlplus (using @formtables.sql...",
    "forks_count": 0,
    "html_url": "https://github.com/hmont3n3p/BannerInverseEngineering",
    "keywords": [
        "cross-side-scripting"
    ],
    "language": null,
    "repo_name": "BannerInverseEngineering",
    "repo_owner": "hmont3n3p",
    "repotime": "2018-04-16, 00:07:48",
    "stargazers_count": 3,
    "watchers_count": 3
}
{
    "commits_count": 10,
    "date_started": "2016-10-18",
    "date_updated": "2018-04-10",
    "description": "A project to spoof my own html code instead of a real server's response to a GET request.",
    "forks_count": 1,
    "html_url": "https://github.com/mets634/TCP-session-hijacker",
    "keywords": [
        "spoofing session"
    ],
    "language": "Python",
    "repo_name": "TCP-session-hijacker",
    "repo_owner": "mets634",
    "repotime": "2018-04-10, 16:56:04",
    "stargazers_count": 4,
    "watchers_count": 4
}
{
    "commits_count": 85,
    "date_started": "2017-06-09",
    "date_updated": "2018-04-08",
    "description": "Totally Automatic LFI Exploiter (+ Reverse Shell) and Scanner ",
    "forks_count": 404,
    "html_url": "https://github.com/D35m0nd142/LFISuite",
    "keywords": [
        "lfi"
    ],
    "language": "Python",
    "repo_name": "LFISuite",
    "repo_owner": "D35m0nd142",
    "repotime": "2018-04-08, 12:30:09",
    "stargazers_count": 1822,
    "watchers_count": 1822
}
{
    "commits_count": 21,
    "date_started": "2018-04-03",
    "date_updated": "2018-04-06",
    "description": "Should work from Windows 7 to Latest Windows 10 FCU",
    "forks_count": 7,
    "html_url": "https://github.com/websecnl/UAC-Bypass-Exploit",
    "keywords": [
        "uac bypass"
    ],
    "language": "Python",
    "repo_name": "UAC-Bypass-Exploit",
    "repo_owner": "websecnl",
    "repotime": "2018-04-06, 14:57:15",
    "stargazers_count": 3,
    "watchers_count": 3
}
{
    "commits_count": 10,
    "date_started": "2017-05-31",
    "date_updated": "2018-04-05",
    "description": "A script to randomize Cobalt Strike Malleable C2 profiles and reduce the chances of flagging signature-based detection controls",
    "forks_count": 87,
    "html_url": "https://github.com/bluscreenofjeff/Malleable-C2-Randomizer",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "Malleable-C2-Randomizer",
    "repo_owner": "bluscreenofjeff",
    "repotime": "2018-04-05, 18:56:25",
    "stargazers_count": 447,
    "watchers_count": 447
}
{
    "commits_count": 7,
    "date_started": "2017-11-07",
    "date_updated": "2018-04-01",
    "description": "Remote Code Execution exploiter",
    "forks_count": 6,
    "html_url": "https://github.com/websecnl/RCE_Universal_Exploiter",
    "keywords": [
        "remote code execution exploitation",
        "remote code execution exploit"
    ],
    "language": "Python",
    "repo_name": "RCE_Universal_Exploiter",
    "repo_owner": "websecnl",
    "repotime": "2018-04-01, 12:14:55",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 17,
    "date_started": "2018-04-24",
    "date_updated": "2018-04-25",
    "description": "CVE-2018-6574 POC : golang 'go get' remote command execution during source code build",
    "forks_count": 13,
    "html_url": "https://github.com/neargle/Go-Get-RCE-CVE-2018-6574-POC",
    "keywords": [
        "rce poc",
        "remote code execution poc"
    ],
    "language": "C",
    "repo_name": "Go-Get-RCE-CVE-2018-6574-POC",
    "repo_owner": "neargle",
    "repotime": "2018-04-25, 00:32:22",
    "stargazers_count": 24,
    "watchers_count": 24
}
{
    "commits_count": 9,
    "date_started": "2018-04-22",
    "date_updated": "2018-04-23",
    "description": "Common WiFi Manager for not hard coding the WiFi SSID and Password",
    "forks_count": 0,
    "html_url": "https://github.com/rid47/WiFi-Manager",
    "keywords": [
        "hard coded password"
    ],
    "language": "C++",
    "repo_name": "WiFi-Manager",
    "repo_owner": "rid47",
    "repotime": "2018-04-23, 15:43:28",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 272,
    "date_started": "2015-03-07",
    "date_updated": "2018-04-20",
    "description": "PowerForensics provides an all in one platform for live disk forensic analysis",
    "forks_count": 275,
    "html_url": "https://github.com/Invoke-IR/PowerForensics",
    "keywords": [
        "by_owner"
    ],
    "language": "C#",
    "repo_name": "PowerForensics",
    "repo_owner": "Invoke-IR",
    "repotime": "2018-04-20, 03:34:59",
    "stargazers_count": 1404,
    "watchers_count": 1404
}
{
    "commits_count": 79,
    "date_started": "2012-07-24",
    "date_updated": "2018-04-17",
    "description": "An automatic XSS discovery tool",
    "forks_count": 119,
    "html_url": "https://github.com/gbrindisi/xsssniper",
    "keywords": [
        "xss"
    ],
    "language": "Python",
    "repo_name": "xsssniper",
    "repo_owner": "gbrindisi",
    "repotime": "2018-04-17, 10:12:36",
    "stargazers_count": 403,
    "watchers_count": 403
}
{
    "commits_count": 3,
    "date_started": "2018-04-16",
    "date_updated": "2018-04-16",
    "description": " Cross Referencing Tables and Forms Used by a Form      [Back]  Here is a unix script, formtables.shl, which shows which tables are used by the given Oracle form, and how they are used (Select or List of values (LOV), Update, Insert, Delete, or undetermined), which can be used on .fmb (form) and .pll (library) files.   It parses the strings in the form file, and makes a best guess effort in determining the tables used by the form, matching the string patterns against a file listing the non-system tables in the database (generated by formtables.sql).   Since it doesn't analyze the code or trace through the function calls in the attached libraries, or look at database triggers for side effects of table changes, it may not find some table references, but, it does a pretty good job on most form files.   For Banner users, it also shows which forms are called by this form, including form access (query only, etc.).  You will first need to run formtables.sql from sqlplus (using @formtables.sql...",
    "forks_count": 0,
    "html_url": "https://github.com/hmont3n3p/BannerInverseEngineering",
    "keywords": [
        "cross-side-scripting"
    ],
    "language": null,
    "repo_name": "BannerInverseEngineering",
    "repo_owner": "hmont3n3p",
    "repotime": "2018-04-16, 00:07:48",
    "stargazers_count": 3,
    "watchers_count": 3
}
{
    "commits_count": 10,
    "date_started": "2016-10-18",
    "date_updated": "2018-04-10",
    "description": "A project to spoof my own html code instead of a real server's response to a GET request.",
    "forks_count": 1,
    "html_url": "https://github.com/mets634/TCP-session-hijacker",
    "keywords": [
        "spoofing session"
    ],
    "language": "Python",
    "repo_name": "TCP-session-hijacker",
    "repo_owner": "mets634",
    "repotime": "2018-04-10, 16:56:04",
    "stargazers_count": 4,
    "watchers_count": 4
}
{
    "commits_count": 85,
    "date_started": "2017-06-09",
    "date_updated": "2018-04-08",
    "description": "Totally Automatic LFI Exploiter (+ Reverse Shell) and Scanner ",
    "forks_count": 404,
    "html_url": "https://github.com/D35m0nd142/LFISuite",
    "keywords": [
        "lfi"
    ],
    "language": "Python",
    "repo_name": "LFISuite",
    "repo_owner": "D35m0nd142",
    "repotime": "2018-04-08, 12:30:09",
    "stargazers_count": 1822,
    "watchers_count": 1822
}
{
    "commits_count": 21,
    "date_started": "2018-04-03",
    "date_updated": "2018-04-06",
    "description": "Should work from Windows 7 to Latest Windows 10 FCU",
    "forks_count": 7,
    "html_url": "https://github.com/websecnl/UAC-Bypass-Exploit",
    "keywords": [
        "uac bypass"
    ],
    "language": "Python",
    "repo_name": "UAC-Bypass-Exploit",
    "repo_owner": "websecnl",
    "repotime": "2018-04-06, 14:57:15",
    "stargazers_count": 3,
    "watchers_count": 3
}
{
    "commits_count": 10,
    "date_started": "2017-05-31",
    "date_updated": "2018-04-05",
    "description": "A script to randomize Cobalt Strike Malleable C2 profiles and reduce the chances of flagging signature-based detection controls",
    "forks_count": 87,
    "html_url": "https://github.com/bluscreenofjeff/Malleable-C2-Randomizer",
    "keywords": [
        "by_owner"
    ],
    "language": "Python",
    "repo_name": "Malleable-C2-Randomizer",
    "repo_owner": "bluscreenofjeff",
    "repotime": "2018-04-05, 18:56:25",
    "stargazers_count": 448,
    "watchers_count": 448
}
{
    "commits_count": 7,
    "date_started": "2017-11-07",
    "date_updated": "2018-04-01",
    "description": "Remote Code Execution exploiter",
    "forks_count": 6,
    "html_url": "https://github.com/websecnl/RCE_Universal_Exploiter",
    "keywords": [
        "remote code execution exploitation",
        "remote code execution exploit"
    ],
    "language": "Python",
    "repo_name": "RCE_Universal_Exploiter",
    "repo_owner": "websecnl",
    "repotime": "2018-04-01, 12:14:55",
    "stargazers_count": 1,
    "watchers_count": 1
}
