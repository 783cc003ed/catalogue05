{
    "commits_count": 8,
    "date_started": "2021-11-07",
    "date_updated": "2021-11-28",
    "description": "An exploit for an XSS and RCE vulnerability in the GoAhead webserver for embedded devices.",
    "forks_count": 4,
    "html_url": "https://github.com/0x1CA3/GoAhead-IPCAM-XSS-and-RCE",
    "keywords": [
        "0day exploitation",
        "0day vulnerability",
        "rce vulnerability",
        "0day exploit"
    ],
    "language": "V",
    "repo_name": "GoAhead-IPCAM-XSS-and-RCE",
    "repo_owner": "0x1CA3",
    "repotime": "2021-11-28, 20:42:54",
    "stargazers_count": 19,
    "watchers_count": 19
}
{
    "commits_count": 3,
    "date_started": "2021-11-25",
    "date_updated": "2021-11-26",
    "description": "A write up of a byte flip zero day vulnerability and exploit",
    "forks_count": 0,
    "html_url": "https://github.com/9xN/xerobyte",
    "keywords": [
        "zero-day vulnerability",
        "zero-day exploitation",
        "zero-day exploit"
    ],
    "language": null,
    "repo_name": "xerobyte",
    "repo_owner": "9xN",
    "repotime": "2021-11-26, 04:47:15",
    "stargazers_count": 3,
    "watchers_count": 3
}
{
    "commits_count": 24,
    "date_started": "2021-10-05",
    "date_updated": "2021-11-24",
    "description": "<no description>",
    "forks_count": 38,
    "html_url": "https://github.com/iilegacyyii/PoC-CVE-2021-41773",
    "keywords": [
        "rce poc",
        "lfi"
    ],
    "language": "Python",
    "repo_name": "PoC-CVE-2021-41773",
    "repo_owner": "iilegacyyii",
    "repotime": "2021-11-24, 12:57:46",
    "stargazers_count": 47,
    "watchers_count": 47
}
{
    "commits_count": 4,
    "date_started": "2021-11-10",
    "date_updated": "2021-11-22",
    "description": "&amp;&#35;35;&amp;&#35;35; Instructions  &amp;&#35;35;&amp;&#35;35;&amp;&#35;35;&amp;&#35;35; Data Modeling  Inspect the CSVs and sketch out an ERD of the tables. Feel free to use a tool like [http://www.quickdatabasediagrams.com](http://www.quickdatabasediagrams.com).  &amp;&#35;35;&amp;&#35;35;&amp;&#35;35;&amp;&#35;35; Data Engineering  * Use the information you have to create a table schema for each of the six CSV files. Remember to specify data types, primary keys, foreign keys, and other constraints.    * For the primary keys check to see if the column is unique, otherwise create a [composite key](https://en.wikipedia.org/wiki/Compound_key). Which takes to primary keys in order to uniquely identify a row.   * Be sure to create tables in the correct order to handle foreign keys.  * Import each CSV file into the corresponding SQL table. **Note** be sure to import the data in the same order that the tables were created and account for the headers when importing to avoid errors.  &amp;&#35;35;&amp;&#35;35;&amp;&#35;35;&amp;&#35;35; Data Analysis  Once you have a complete database, do the follo...",
    "forks_count": 0,
    "html_url": "https://github.com/jlira5418/sql-challenge",
    "keywords": [
        "use after free analysis"
    ],
    "language": "Jupyter Notebook",
    "repo_name": "sql-challenge",
    "repo_owner": "jlira5418",
    "repotime": "2021-11-22, 22:12:58",
    "stargazers_count": 2,
    "watchers_count": 2
}
{
    "commits_count": 22,
    "date_started": "2020-09-09",
    "date_updated": "2021-11-21",
    "description": "Bypass UAC by hijacking a DLL located in the Native Image Cache",
    "forks_count": 47,
    "html_url": "https://github.com/AzAgarampur/byeintegrity-uac",
    "keywords": [
        "uac bypass"
    ],
    "language": "C++",
    "repo_name": "byeintegrity-uac",
    "repo_owner": "AzAgarampur",
    "repotime": "2021-11-21, 03:02:29",
    "stargazers_count": 214,
    "watchers_count": 214
}
{
    "commits_count": 8,
    "date_started": "2021-11-20",
    "date_updated": "2021-11-20",
    "description": "CONTENT BEYOND SYLLABUS IMPLEMENTATION OF REMOTE COMMAND EXECUTION (RCE) AIM To implement Remote Command Execution(RCE). ALGORITHM CLIENT SIDE 1. Establish a connection between the Client and Server. Socket client=new Socket(&amp;quot;127.0.0.1&amp;quot;,6555); 2. Create instances for input and output streams. Print Stream ps=new Print Stream(client.getOutputStream()); 3. BufferedReaderbr=newBufferedReader(newInputStreamReader(System.in)); 4. Enter the command in Client Window. Send themessage to its output str=br.readLine(); ps.println(str); SERVER SIDE 1. Accept the connection request by the client. ServerSocket server=new ServerSocket(6555); Sockets=server.accept(); 2. Getthe IPaddressfromitsinputstream. BufferedReaderbr1=newBufferedReader(newInputStreamReader(s.getInputStream())); ip=br1.readLine(); 3. During runtime execute the process Runtime r=Runtime.getRuntime(); Process p=r.exec(str); CLIENT PROGRAM import java.io.*; import java.net.*; class clientRCE { public static void main(String...",
    "forks_count": 0,
    "html_url": "https://github.com/Anishakaspar/CN-Lab",
    "keywords": [
        "Windows rce"
    ],
    "language": "Java",
    "repo_name": "CN-Lab",
    "repo_owner": "Anishakaspar",
    "repotime": "2021-11-20, 22:52:20",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 9,
    "date_started": "2021-11-16",
    "date_updated": "2021-11-17",
    "description": "Bypassing windows uac, however its an old approach/method but its still unpatched ¯\\_(ツ)_/¯ ",
    "forks_count": 18,
    "html_url": "https://github.com/exploitblizzard/UAC-Bypass",
    "keywords": [
        "uac bypass"
    ],
    "language": "C#",
    "repo_name": "UAC-Bypass",
    "repo_owner": "exploitblizzard",
    "repotime": "2021-11-17, 10:34:56",
    "stargazers_count": 44,
    "watchers_count": 44
}
{
    "commits_count": 11,
    "date_started": "2021-11-01",
    "date_updated": "2021-11-17",
    "description": "Cross-site scripting is a type of web application security vulnerability typically found in web applications. XSS attacks enable attackers to inject client-side scripts into web pages viewed by other users.It can be easily use for phishing attack.",
    "forks_count": 0,
    "html_url": "https://github.com/akashranjanpatel/Payload.XSS",
    "keywords": [
        "cross-side-scripting"
    ],
    "language": null,
    "repo_name": "Payload.XSS",
    "repo_owner": "akashranjanpatel",
    "repotime": "2021-11-17, 01:24:02",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 62,
    "date_started": "2019-11-27",
    "date_updated": "2021-11-13",
    "description": "Getting started with java code auditing  代码审计入门的小项目",
    "forks_count": 120,
    "html_url": "https://github.com/cn-panda/JavaCodeAudit",
    "keywords": [
        "ssrf"
    ],
    "language": "JavaScript",
    "repo_name": "JavaCodeAudit",
    "repo_owner": "cn-panda",
    "repotime": "2021-11-13, 15:32:35",
    "stargazers_count": 889,
    "watchers_count": 889
}
{
    "commits_count": 26,
    "date_started": "2020-04-18",
    "date_updated": "2021-11-13",
    "description": "The best exploitation tool for SSL VPN 0day vulnerabilities.",
    "forks_count": 15,
    "html_url": "https://github.com/shelld3v/PwnVPN",
    "keywords": [
        "0day exploit",
        "0day exploitation",
        "0day vulnerability"
    ],
    "language": "Python",
    "repo_name": "PwnVPN",
    "repo_owner": "shelld3v",
    "repotime": "2021-11-13, 08:48:47",
    "stargazers_count": 81,
    "watchers_count": 81
}
{
    "commits_count": 2,
    "date_started": "2021-11-10",
    "date_updated": "2021-11-09",
    "description": "PHPMailer PHPMailer – A full-featured email creation and transfer class for PHP Test status codecov.io Latest Stable Version Total Downloads License API Docs  Features Probably the world's most popular code for sending email from PHP! Used by many open-source projects: WordPress, Drupal, 1CRM, SugarCRM, Yii, Joomla! and many more Integrated SMTP support – send without a local mail server Send emails with multiple To, CC, BCC and Reply-to addresses Multipart/alternative emails for mail clients that do not read HTML email Add attachments, including inline Support for UTF-8 content and 8bit, base64, binary, and quoted-printable encodings SMTP authentication with LOGIN, PLAIN, CRAM-MD5, and XOAUTH2 mechanisms over SMTPS and SMTP+STARTTLS transports Validates email addresses automatically Protects against header injection attacks Error messages in over 50 languages! DKIM and S/MIME signing support Compatible with PHP 5.5 and later, including PHP 8.1 Namespaced to prevent name clashes Much m...",
    "forks_count": 9,
    "html_url": "https://github.com/MateusNobreSilva/app_send_mail",
    "keywords": [
        "hard coded password"
    ],
    "language": "PHP",
    "repo_name": "app_send_mail",
    "repo_owner": "MateusNobreSilva",
    "repotime": "2021-11-09, 22:21:15",
    "stargazers_count": 15,
    "watchers_count": 15
}
{
    "commits_count": 10,
    "date_started": "2021-10-25",
    "date_updated": "2021-11-05",
    "description": "LPE exploit for a UAF in Windows (CVE-2021-40449).",
    "forks_count": 15,
    "html_url": "https://github.com/hakivvi/CVE-2021-40449",
    "keywords": [
        "uaf exploit",
        "Windows uaf",
        "uaf exploitation",
        "Windows lpe exploit",
        "Windows lpe",
        "Windows uaf exploitation",
        "Windows lpe exploitation",
        "lpe exploit",
        "Windows uaf exploit",
        "lpe exploitation"
    ],
    "language": "C++",
    "repo_name": "CVE-2021-40449",
    "repo_owner": "hakivvi",
    "repotime": "2021-11-05, 07:54:09",
    "stargazers_count": 42,
    "watchers_count": 42
}
{
    "commits_count": 25,
    "date_started": "2021-10-27",
    "date_updated": "2021-11-02",
    "description": "ASLR bypass without infoleak",
    "forks_count": 17,
    "html_url": "https://github.com/nick0ve/how-to-bypass-aslr-on-linux-x86_64",
    "keywords": [
        "aslr bypass"
    ],
    "language": "Python",
    "repo_name": "how-to-bypass-aslr-on-linux-x86_64",
    "repo_owner": "nick0ve",
    "repotime": "2021-11-02, 20:56:24",
    "stargazers_count": 161,
    "watchers_count": 161
}
{
    "commits_count": 12,
    "date_started": "2021-10-09",
    "date_updated": "2021-11-02",
    "description": "Remote Code Execution POC for CVE-2020-0796",
    "forks_count": 1,
    "html_url": "https://github.com/orangmuda/CVE-2020-0796",
    "keywords": [
        "remote code execution exploitation",
        "remote code execution poc"
    ],
    "language": "Assembly",
    "repo_name": "CVE-2020-0796",
    "repo_owner": "orangmuda",
    "repotime": "2021-11-02, 02:36:41",
    "stargazers_count": 4,
    "watchers_count": 4
}
{
    "commits_count": 8,
    "date_started": "2021-11-07",
    "date_updated": "2021-11-28",
    "description": "An exploit for an XSS and RCE vulnerability in the GoAhead webserver for embedded devices.",
    "forks_count": 4,
    "html_url": "https://github.com/0x1CA3/GoAhead-IPCAM-XSS-and-RCE",
    "keywords": [
        "0day exploitation",
        "0day vulnerability",
        "rce vulnerability",
        "0day exploit"
    ],
    "language": "V",
    "repo_name": "GoAhead-IPCAM-XSS-and-RCE",
    "repo_owner": "0x1CA3",
    "repotime": "2021-11-28, 20:42:54",
    "stargazers_count": 19,
    "watchers_count": 19
}
{
    "commits_count": 3,
    "date_started": "2021-11-25",
    "date_updated": "2021-11-26",
    "description": "A write up of a byte flip zero day vulnerability and exploit",
    "forks_count": 0,
    "html_url": "https://github.com/9xN/xerobyte",
    "keywords": [
        "zero-day vulnerability",
        "zero-day exploitation",
        "zero-day exploit"
    ],
    "language": null,
    "repo_name": "xerobyte",
    "repo_owner": "9xN",
    "repotime": "2021-11-26, 04:47:15",
    "stargazers_count": 3,
    "watchers_count": 3
}
{
    "commits_count": 24,
    "date_started": "2021-10-05",
    "date_updated": "2021-11-24",
    "description": "<no description>",
    "forks_count": 38,
    "html_url": "https://github.com/iilegacyyii/PoC-CVE-2021-41773",
    "keywords": [
        "rce poc",
        "lfi"
    ],
    "language": "Python",
    "repo_name": "PoC-CVE-2021-41773",
    "repo_owner": "iilegacyyii",
    "repotime": "2021-11-24, 12:57:46",
    "stargazers_count": 47,
    "watchers_count": 47
}
{
    "commits_count": 4,
    "date_started": "2021-11-10",
    "date_updated": "2021-11-22",
    "description": "&amp;&#35;35;&amp;&#35;35; Instructions  &amp;&#35;35;&amp;&#35;35;&amp;&#35;35;&amp;&#35;35; Data Modeling  Inspect the CSVs and sketch out an ERD of the tables. Feel free to use a tool like [http://www.quickdatabasediagrams.com](http://www.quickdatabasediagrams.com).  &amp;&#35;35;&amp;&#35;35;&amp;&#35;35;&amp;&#35;35; Data Engineering  * Use the information you have to create a table schema for each of the six CSV files. Remember to specify data types, primary keys, foreign keys, and other constraints.    * For the primary keys check to see if the column is unique, otherwise create a [composite key](https://en.wikipedia.org/wiki/Compound_key). Which takes to primary keys in order to uniquely identify a row.   * Be sure to create tables in the correct order to handle foreign keys.  * Import each CSV file into the corresponding SQL table. **Note** be sure to import the data in the same order that the tables were created and account for the headers when importing to avoid errors.  &amp;&#35;35;&amp;&#35;35;&amp;&#35;35;&amp;&#35;35; Data Analysis  Once you have a complete database, do the follo...",
    "forks_count": 0,
    "html_url": "https://github.com/jlira5418/sql-challenge",
    "keywords": [
        "use after free analysis"
    ],
    "language": "Jupyter Notebook",
    "repo_name": "sql-challenge",
    "repo_owner": "jlira5418",
    "repotime": "2021-11-22, 22:12:58",
    "stargazers_count": 2,
    "watchers_count": 2
}
{
    "commits_count": 22,
    "date_started": "2020-09-09",
    "date_updated": "2021-11-21",
    "description": "Bypass UAC by hijacking a DLL located in the Native Image Cache",
    "forks_count": 47,
    "html_url": "https://github.com/AzAgarampur/byeintegrity-uac",
    "keywords": [
        "uac bypass"
    ],
    "language": "C++",
    "repo_name": "byeintegrity-uac",
    "repo_owner": "AzAgarampur",
    "repotime": "2021-11-21, 03:02:29",
    "stargazers_count": 214,
    "watchers_count": 214
}
{
    "commits_count": 8,
    "date_started": "2021-11-20",
    "date_updated": "2021-11-20",
    "description": "CONTENT BEYOND SYLLABUS IMPLEMENTATION OF REMOTE COMMAND EXECUTION (RCE) AIM To implement Remote Command Execution(RCE). ALGORITHM CLIENT SIDE 1. Establish a connection between the Client and Server. Socket client=new Socket(&amp;quot;127.0.0.1&amp;quot;,6555); 2. Create instances for input and output streams. Print Stream ps=new Print Stream(client.getOutputStream()); 3. BufferedReaderbr=newBufferedReader(newInputStreamReader(System.in)); 4. Enter the command in Client Window. Send themessage to its output str=br.readLine(); ps.println(str); SERVER SIDE 1. Accept the connection request by the client. ServerSocket server=new ServerSocket(6555); Sockets=server.accept(); 2. Getthe IPaddressfromitsinputstream. BufferedReaderbr1=newBufferedReader(newInputStreamReader(s.getInputStream())); ip=br1.readLine(); 3. During runtime execute the process Runtime r=Runtime.getRuntime(); Process p=r.exec(str); CLIENT PROGRAM import java.io.*; import java.net.*; class clientRCE { public static void main(String...",
    "forks_count": 0,
    "html_url": "https://github.com/Anishakaspar/CN-Lab",
    "keywords": [
        "Windows rce"
    ],
    "language": "Java",
    "repo_name": "CN-Lab",
    "repo_owner": "Anishakaspar",
    "repotime": "2021-11-20, 22:52:20",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 9,
    "date_started": "2021-11-16",
    "date_updated": "2021-11-17",
    "description": "Bypassing windows uac, however its an old approach/method but its still unpatched ¯\\_(ツ)_/¯ ",
    "forks_count": 18,
    "html_url": "https://github.com/exploitblizzard/UAC-Bypass",
    "keywords": [
        "uac bypass"
    ],
    "language": "C#",
    "repo_name": "UAC-Bypass",
    "repo_owner": "exploitblizzard",
    "repotime": "2021-11-17, 10:34:56",
    "stargazers_count": 44,
    "watchers_count": 44
}
{
    "commits_count": 11,
    "date_started": "2021-11-01",
    "date_updated": "2021-11-17",
    "description": "Cross-site scripting is a type of web application security vulnerability typically found in web applications. XSS attacks enable attackers to inject client-side scripts into web pages viewed by other users.It can be easily use for phishing attack.",
    "forks_count": 0,
    "html_url": "https://github.com/akashranjanpatel/Payload.XSS",
    "keywords": [
        "cross-side-scripting"
    ],
    "language": null,
    "repo_name": "Payload.XSS",
    "repo_owner": "akashranjanpatel",
    "repotime": "2021-11-17, 01:24:02",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 62,
    "date_started": "2019-11-27",
    "date_updated": "2021-11-13",
    "description": "Getting started with java code auditing  代码审计入门的小项目",
    "forks_count": 120,
    "html_url": "https://github.com/cn-panda/JavaCodeAudit",
    "keywords": [
        "ssrf"
    ],
    "language": "JavaScript",
    "repo_name": "JavaCodeAudit",
    "repo_owner": "cn-panda",
    "repotime": "2021-11-13, 15:32:35",
    "stargazers_count": 889,
    "watchers_count": 889
}
{
    "commits_count": 26,
    "date_started": "2020-04-18",
    "date_updated": "2021-11-13",
    "description": "The best exploitation tool for SSL VPN 0day vulnerabilities.",
    "forks_count": 15,
    "html_url": "https://github.com/shelld3v/PwnVPN",
    "keywords": [
        "0day exploit",
        "0day exploitation",
        "0day vulnerability"
    ],
    "language": "Python",
    "repo_name": "PwnVPN",
    "repo_owner": "shelld3v",
    "repotime": "2021-11-13, 08:48:47",
    "stargazers_count": 81,
    "watchers_count": 81
}
{
    "commits_count": 2,
    "date_started": "2021-11-10",
    "date_updated": "2021-11-09",
    "description": "PHPMailer PHPMailer – A full-featured email creation and transfer class for PHP Test status codecov.io Latest Stable Version Total Downloads License API Docs  Features Probably the world's most popular code for sending email from PHP! Used by many open-source projects: WordPress, Drupal, 1CRM, SugarCRM, Yii, Joomla! and many more Integrated SMTP support – send without a local mail server Send emails with multiple To, CC, BCC and Reply-to addresses Multipart/alternative emails for mail clients that do not read HTML email Add attachments, including inline Support for UTF-8 content and 8bit, base64, binary, and quoted-printable encodings SMTP authentication with LOGIN, PLAIN, CRAM-MD5, and XOAUTH2 mechanisms over SMTPS and SMTP+STARTTLS transports Validates email addresses automatically Protects against header injection attacks Error messages in over 50 languages! DKIM and S/MIME signing support Compatible with PHP 5.5 and later, including PHP 8.1 Namespaced to prevent name clashes Much m...",
    "forks_count": 9,
    "html_url": "https://github.com/MateusNobreSilva/app_send_mail",
    "keywords": [
        "hard coded password"
    ],
    "language": "PHP",
    "repo_name": "app_send_mail",
    "repo_owner": "MateusNobreSilva",
    "repotime": "2021-11-09, 22:21:15",
    "stargazers_count": 15,
    "watchers_count": 15
}
{
    "commits_count": 10,
    "date_started": "2021-10-25",
    "date_updated": "2021-11-05",
    "description": "LPE exploit for a UAF in Windows (CVE-2021-40449).",
    "forks_count": 15,
    "html_url": "https://github.com/hakivvi/CVE-2021-40449",
    "keywords": [
        "uaf exploit",
        "Windows uaf",
        "uaf exploitation",
        "Windows lpe exploit",
        "Windows lpe",
        "Windows uaf exploitation",
        "Windows lpe exploitation",
        "lpe exploit",
        "Windows uaf exploit",
        "lpe exploitation"
    ],
    "language": "C++",
    "repo_name": "CVE-2021-40449",
    "repo_owner": "hakivvi",
    "repotime": "2021-11-05, 07:54:09",
    "stargazers_count": 41,
    "watchers_count": 41
}
{
    "commits_count": 25,
    "date_started": "2021-10-27",
    "date_updated": "2021-11-02",
    "description": "ASLR bypass without infoleak",
    "forks_count": 17,
    "html_url": "https://github.com/nick0ve/how-to-bypass-aslr-on-linux-x86_64",
    "keywords": [
        "aslr bypass"
    ],
    "language": "Python",
    "repo_name": "how-to-bypass-aslr-on-linux-x86_64",
    "repo_owner": "nick0ve",
    "repotime": "2021-11-02, 20:56:24",
    "stargazers_count": 161,
    "watchers_count": 161
}
{
    "commits_count": 12,
    "date_started": "2021-10-09",
    "date_updated": "2021-11-02",
    "description": "Remote Code Execution POC for CVE-2020-0796",
    "forks_count": 1,
    "html_url": "https://github.com/orangmuda/CVE-2020-0796",
    "keywords": [
        "remote code execution exploitation",
        "remote code execution poc"
    ],
    "language": "Assembly",
    "repo_name": "CVE-2020-0796",
    "repo_owner": "orangmuda",
    "repotime": "2021-11-02, 02:36:41",
    "stargazers_count": 4,
    "watchers_count": 4
}
{
    "commits_count": 8,
    "date_started": "2021-11-07",
    "date_updated": "2021-11-28",
    "description": "An exploit for an XSS and RCE vulnerability in the GoAhead webserver for embedded devices.",
    "forks_count": 4,
    "html_url": "https://github.com/0x1CA3/GoAhead-IPCAM-XSS-and-RCE",
    "keywords": [
        "0day exploitation",
        "0day vulnerability",
        "rce vulnerability",
        "0day exploit"
    ],
    "language": "V",
    "repo_name": "GoAhead-IPCAM-XSS-and-RCE",
    "repo_owner": "0x1CA3",
    "repotime": "2021-11-28, 20:42:54",
    "stargazers_count": 19,
    "watchers_count": 19
}
{
    "commits_count": 3,
    "date_started": "2021-11-25",
    "date_updated": "2021-11-26",
    "description": "A write up of a byte flip zero day vulnerability and exploit",
    "forks_count": 0,
    "html_url": "https://github.com/9xN/xerobyte",
    "keywords": [
        "zero-day vulnerability",
        "zero-day exploitation",
        "zero-day exploit"
    ],
    "language": null,
    "repo_name": "xerobyte",
    "repo_owner": "9xN",
    "repotime": "2021-11-26, 04:47:15",
    "stargazers_count": 3,
    "watchers_count": 3
}
{
    "commits_count": 24,
    "date_started": "2021-10-05",
    "date_updated": "2021-11-24",
    "description": "<no description>",
    "forks_count": 38,
    "html_url": "https://github.com/iilegacyyii/PoC-CVE-2021-41773",
    "keywords": [
        "rce poc",
        "lfi"
    ],
    "language": "Python",
    "repo_name": "PoC-CVE-2021-41773",
    "repo_owner": "iilegacyyii",
    "repotime": "2021-11-24, 12:57:46",
    "stargazers_count": 47,
    "watchers_count": 47
}
{
    "commits_count": 4,
    "date_started": "2021-11-10",
    "date_updated": "2021-11-22",
    "description": "&amp;&#35;35;&amp;&#35;35; Instructions  &amp;&#35;35;&amp;&#35;35;&amp;&#35;35;&amp;&#35;35; Data Modeling  Inspect the CSVs and sketch out an ERD of the tables. Feel free to use a tool like [http://www.quickdatabasediagrams.com](http://www.quickdatabasediagrams.com).  &amp;&#35;35;&amp;&#35;35;&amp;&#35;35;&amp;&#35;35; Data Engineering  * Use the information you have to create a table schema for each of the six CSV files. Remember to specify data types, primary keys, foreign keys, and other constraints.    * For the primary keys check to see if the column is unique, otherwise create a [composite key](https://en.wikipedia.org/wiki/Compound_key). Which takes to primary keys in order to uniquely identify a row.   * Be sure to create tables in the correct order to handle foreign keys.  * Import each CSV file into the corresponding SQL table. **Note** be sure to import the data in the same order that the tables were created and account for the headers when importing to avoid errors.  &amp;&#35;35;&amp;&#35;35;&amp;&#35;35;&amp;&#35;35; Data Analysis  Once you have a complete database, do the follo...",
    "forks_count": 0,
    "html_url": "https://github.com/jlira5418/sql-challenge",
    "keywords": [
        "use after free analysis"
    ],
    "language": "Jupyter Notebook",
    "repo_name": "sql-challenge",
    "repo_owner": "jlira5418",
    "repotime": "2021-11-22, 22:12:58",
    "stargazers_count": 2,
    "watchers_count": 2
}
{
    "commits_count": 22,
    "date_started": "2020-09-09",
    "date_updated": "2021-11-21",
    "description": "Bypass UAC by hijacking a DLL located in the Native Image Cache",
    "forks_count": 47,
    "html_url": "https://github.com/AzAgarampur/byeintegrity-uac",
    "keywords": [
        "uac bypass"
    ],
    "language": "C++",
    "repo_name": "byeintegrity-uac",
    "repo_owner": "AzAgarampur",
    "repotime": "2021-11-21, 03:02:29",
    "stargazers_count": 214,
    "watchers_count": 214
}
{
    "commits_count": 8,
    "date_started": "2021-11-20",
    "date_updated": "2021-11-20",
    "description": "CONTENT BEYOND SYLLABUS IMPLEMENTATION OF REMOTE COMMAND EXECUTION (RCE) AIM To implement Remote Command Execution(RCE). ALGORITHM CLIENT SIDE 1. Establish a connection between the Client and Server. Socket client=new Socket(&amp;quot;127.0.0.1&amp;quot;,6555); 2. Create instances for input and output streams. Print Stream ps=new Print Stream(client.getOutputStream()); 3. BufferedReaderbr=newBufferedReader(newInputStreamReader(System.in)); 4. Enter the command in Client Window. Send themessage to its output str=br.readLine(); ps.println(str); SERVER SIDE 1. Accept the connection request by the client. ServerSocket server=new ServerSocket(6555); Sockets=server.accept(); 2. Getthe IPaddressfromitsinputstream. BufferedReaderbr1=newBufferedReader(newInputStreamReader(s.getInputStream())); ip=br1.readLine(); 3. During runtime execute the process Runtime r=Runtime.getRuntime(); Process p=r.exec(str); CLIENT PROGRAM import java.io.*; import java.net.*; class clientRCE { public static void main(String...",
    "forks_count": 0,
    "html_url": "https://github.com/Anishakaspar/CN-Lab",
    "keywords": [
        "Windows rce"
    ],
    "language": "Java",
    "repo_name": "CN-Lab",
    "repo_owner": "Anishakaspar",
    "repotime": "2021-11-20, 22:52:20",
    "stargazers_count": 1,
    "watchers_count": 1
}
{
    "commits_count": 9,
    "date_started": "2021-11-16",
    "date_updated": "2021-11-17",
    "description": "Bypassing windows uac, however its an old approach/method but its still unpatched ¯\\_(ツ)_/¯ ",
    "forks_count": 18,
    "html_url": "https://github.com/exploitblizzard/UAC-Bypass",
    "keywords": [
        "uac bypass"
    ],
    "language": "C#",
    "repo_name": "UAC-Bypass",
    "repo_owner": "exploitblizzard",
    "repotime": "2021-11-17, 10:34:56",
    "stargazers_count": 44,
    "watchers_count": 44
}
{
    "commits_count": 11,
    "date_started": "2021-11-01",
    "date_updated": "2021-11-17",
    "description": "Cross-site scripting is a type of web application security vulnerability typically found in web applications. XSS attacks enable attackers to inject client-side scripts into web pages viewed by other users.It can be easily use for phishing attack.",
    "forks_count": 0,
    "html_url": "https://github.com/akashranjanpatel/Payload.XSS",
    "keywords": [
        "cross-side-scripting"
    ],
    "language": null,
    "repo_name": "Payload.XSS",
    "repo_owner": "akashranjanpatel",
    "repotime": "2021-11-17, 01:24:02",
    "stargazers_count": 0,
    "watchers_count": 0
}
{
    "commits_count": 62,
    "date_started": "2019-11-27",
    "date_updated": "2021-11-13",
    "description": "Getting started with java code auditing  代码审计入门的小项目",
    "forks_count": 120,
    "html_url": "https://github.com/cn-panda/JavaCodeAudit",
    "keywords": [
        "ssrf"
    ],
    "language": "JavaScript",
    "repo_name": "JavaCodeAudit",
    "repo_owner": "cn-panda",
    "repotime": "2021-11-13, 15:32:35",
    "stargazers_count": 889,
    "watchers_count": 889
}
{
    "commits_count": 26,
    "date_started": "2020-04-18",
    "date_updated": "2021-11-13",
    "description": "The best exploitation tool for SSL VPN 0day vulnerabilities.",
    "forks_count": 15,
    "html_url": "https://github.com/shelld3v/PwnVPN",
    "keywords": [
        "0day exploit",
        "0day exploitation",
        "0day vulnerability"
    ],
    "language": "Python",
    "repo_name": "PwnVPN",
    "repo_owner": "shelld3v",
    "repotime": "2021-11-13, 08:48:47",
    "stargazers_count": 81,
    "watchers_count": 81
}
{
    "commits_count": 2,
    "date_started": "2021-11-10",
    "date_updated": "2021-11-09",
    "description": "PHPMailer PHPMailer – A full-featured email creation and transfer class for PHP Test status codecov.io Latest Stable Version Total Downloads License API Docs  Features Probably the world's most popular code for sending email from PHP! Used by many open-source projects: WordPress, Drupal, 1CRM, SugarCRM, Yii, Joomla! and many more Integrated SMTP support – send without a local mail server Send emails with multiple To, CC, BCC and Reply-to addresses Multipart/alternative emails for mail clients that do not read HTML email Add attachments, including inline Support for UTF-8 content and 8bit, base64, binary, and quoted-printable encodings SMTP authentication with LOGIN, PLAIN, CRAM-MD5, and XOAUTH2 mechanisms over SMTPS and SMTP+STARTTLS transports Validates email addresses automatically Protects against header injection attacks Error messages in over 50 languages! DKIM and S/MIME signing support Compatible with PHP 5.5 and later, including PHP 8.1 Namespaced to prevent name clashes Much m...",
    "forks_count": 9,
    "html_url": "https://github.com/MateusNobreSilva/app_send_mail",
    "keywords": [
        "hard coded password"
    ],
    "language": "PHP",
    "repo_name": "app_send_mail",
    "repo_owner": "MateusNobreSilva",
    "repotime": "2021-11-09, 22:21:15",
    "stargazers_count": 15,
    "watchers_count": 15
}
{
    "commits_count": 10,
    "date_started": "2021-10-25",
    "date_updated": "2021-11-05",
    "description": "LPE exploit for a UAF in Windows (CVE-2021-40449).",
    "forks_count": 15,
    "html_url": "https://github.com/hakivvi/CVE-2021-40449",
    "keywords": [
        "uaf exploit",
        "Windows uaf",
        "uaf exploitation",
        "Windows lpe exploit",
        "Windows lpe",
        "Windows uaf exploitation",
        "Windows lpe exploitation",
        "lpe exploit",
        "Windows uaf exploit",
        "lpe exploitation"
    ],
    "language": "C++",
    "repo_name": "CVE-2021-40449",
    "repo_owner": "hakivvi",
    "repotime": "2021-11-05, 07:54:09",
    "stargazers_count": 41,
    "watchers_count": 41
}
{
    "commits_count": 25,
    "date_started": "2021-10-27",
    "date_updated": "2021-11-02",
    "description": "ASLR bypass without infoleak",
    "forks_count": 17,
    "html_url": "https://github.com/nick0ve/how-to-bypass-aslr-on-linux-x86_64",
    "keywords": [
        "aslr bypass"
    ],
    "language": "Python",
    "repo_name": "how-to-bypass-aslr-on-linux-x86_64",
    "repo_owner": "nick0ve",
    "repotime": "2021-11-02, 20:56:24",
    "stargazers_count": 161,
    "watchers_count": 161
}
{
    "commits_count": 12,
    "date_started": "2021-10-09",
    "date_updated": "2021-11-02",
    "description": "Remote Code Execution POC for CVE-2020-0796",
    "forks_count": 1,
    "html_url": "https://github.com/orangmuda/CVE-2020-0796",
    "keywords": [
        "remote code execution exploitation",
        "remote code execution poc"
    ],
    "language": "Assembly",
    "repo_name": "CVE-2020-0796",
    "repo_owner": "orangmuda",
    "repotime": "2021-11-02, 02:36:41",
    "stargazers_count": 4,
    "watchers_count": 4
}
